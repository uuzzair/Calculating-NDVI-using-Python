#Importing the File
import rasterio
from rasterio.plot import show
import numpy as np
import os
%matplotlib inline
# Data dir
data_dir = r"C:\xampp"
# Filepath
fp = os.path.join(data_dir, "allbands.tif")
# Open the file:
raster = rasterio.open(fp)
# Plot band 1
show((raster, 1))

#Visualizing Raster Bands:
import matplotlib.pyplot as plt
%matplotlib inline
# Initialize subplots 
fig, (ax1, ax2, ax3) = plt.subplots(ncols=3, nrows=1, figsize=(10, 4), sharey=True)
# Plot Red, Green and Blue (rgb)
show((raster, 4), cmap='Reds', ax=ax1)
show((raster, 3), cmap='Greens', ax=ax2)
show((raster, 1), cmap='Blues', ax=ax3)
# Add titles
ax1.set_title("Red")
ax2.set_title("Green")
ax3.set_title("Blue")

# Read the grid values into numpy arrays
red = raster.read(3)
green = raster.read(2)
blue = raster.read(1)
# Function to normalize the grid values
def normalize(array):
 """Normalizes numpy arrays into scale 0.0 - 1.0"""
 array_min, array_max = array.min(), array.max()
 return ((array - array_min)/(array_max - array_min))
# Normalize the bands
redn = normalize(red)
greenn = normalize(green)
bluen = normalize(blue)
print("Normalized bands")
print(redn.min(), '-', redn.max(), 'mean:', redn.mean())
print(greenn.min(), '-', greenn.max(), 'mean:', greenn.mean())
print(bluen.min(), '-', bluen.max(), 'mean:', bluen.mean()

# Create RGB natural color composite, it takes hell lot of time
rgb = np.dstack((redn, greenn, bluen))
# Let's see how our color composite looks like
plt.imshow(rgb)

# Red Red Channel
red = raster.read(3)
# Read NIR channel (channel number 4)
nir = raster.read(4)
# Calculate some stats to check the data
print(red.mean())
print(nir.mean())
print(type(nir))

# Visualize
show(nir, cmap='terrain')
red = red.astype('f4')
nir = nir.astype('f4')
nir
np.seterr(divide='ignore', invalid='ignore')
# Calculate NDVI using numpy arrays
ndvi = (nir - red) / (nir + red)
%matplotlib inline
# Plot the NDVI
plt.imshow(ndvi, cmap='terrain_r')
# Add colorbar to show the index
plt.colorbar()

# Create classes and apply to NDVI results
ndvi_class_bins = [-np.inf, 0, 0.1, 0.25, 0.4, np.inf]
ndvi_landsat_class = np.digitize(ndvi, ndvi_class_bins)
# Apply the nodata mask to the newly classified NDVI data
ndvi_landsat_class = np.ma.masked_where(
 np.ma.getmask(ndvi), ndvi_landsat_class
)
np.unique(ndvi_landsat_class)

from matplotlib.colors import ListedColormap
# Define color map
nbr_colors = ["gray", "y", "yellowgreen", "g", "darkgreen"]
nbr_cmap = ListedColormap(nbr_colors)
# Define class names
ndvi_cat_names = [
 "No Vegetation",
 "Bare Area",
 "Low Vegetation",
 "Moderate Vegetation",
 "High Vegetation",
]
# Get list of classes
classes = np.unique(ndvi_landsat_class)
classes = classes.tolist()
# The mask returns a value of none in the classes. remove that
classes = classes[0:5]
# Plot your data
fig, ax = plt.subplots(figsize=(12, 12))
im = ax.imshow(ndvi_landsat_class, cmap=nbr_cmap)
ep.draw_legend(im_ax=im, classes=classes, titles=ndvi_cat_names)
ax.set_title(
 "Landsat 8 - Normalized Difference Vegetation Index (NDVI) Classes",
 fontsize=14,
)
ax.set_axis_off()
# Auto adjust subplot to fit figure size
plt.tight_layout()

#creating histogram
from rasterio.plot import show_hist
show_hist(ndvi, bins=50, lw=0.0, stacked=False, alpha=0.3,
 histtype='stepfilled', title="Histogram")
